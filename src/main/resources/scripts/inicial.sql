CREATE SCHEMA IF NOT EXISTS dominio;
CREATE SCHEMA IF NOT EXISTS seguranca;
CREATE SCHEMA IF NOT EXISTS auditoria;

CREATE TABLE IF NOT EXISTS seguranca.usuario
(
    seq_usuario integer generated by default as identity,
    username    varchar(30) not null unique,
    senha       varchar(60),
    primary key (seq_usuario)
);

CREATE TABLE IF NOT EXISTS dominio.produtor
(
    id   integer generated by default as identity,
    nome varchar(60) not null,
    primary key (id)
);

CREATE TABLE IF NOT EXISTS dominio.album
(
    id          integer generated by default as identity,
    autor       varchar(60) not null,
    titulo      varchar(80) not null,
    produtor_id integer     not null,
    primary key (id),
    CONSTRAINT fk_album_produtor FOREIGN KEY (produtor_id)
        REFERENCES dominio.produtor (id)
);

CREATE TABLE IF NOT EXISTS dominio.musica
(
    id       integer generated by default as identity,
    letra    varchar(255) not null,
    titulo   varchar(60)  not null,
    album_id integer,
    primary key (id),
    CONSTRAINT fk_musica_album FOREIGN KEY (album_id)
        REFERENCES dominio.album (id)
);

// TABELAS DE REVISÃO

CREATE TABLE IF NOT EXISTS auditoria.info_auditoria
(
    id               integer generated by default as identity,
    data_modificacao timestamp,
    seq_usuario      integer not null,
    primary key (id),
    CONSTRAINT fk_seq_usuario_auditoria FOREIGN KEY (seq_usuario)
        REFERENCES seguranca.usuario (seq_usuario)
);

CREATE TABLE IF NOT EXISTS auditoria.aud_album
(
    id          integer not null,
    revision_id integer not null,
    revtype     tinyint,
    autor       varchar(60),
    titulo      varchar(80),
    produtor_id integer,
    primary key (id, revision_id),
    CONSTRAINT fk_revision_id_auditoria_album FOREIGN KEY (revision_id)
        REFERENCES auditoria.info_auditoria (id)
);

CREATE TABLE IF NOT EXISTS auditoria.aud_musica
(
    id          integer not null,
    revision_id integer not null,
    revtype     tinyint,
    letra       varchar(255),
    titulo      varchar(60),
    album_id    integer,
    primary key (id, revision_id),
    CONSTRAINT fk_revision_id_auditoria_musica FOREIGN KEY (revision_id)
        REFERENCES auditoria.info_auditoria (id)
);

CREATE TABLE IF NOT EXISTS auditoria.aud_produtor
(
    id          integer not null,
    revision_id integer not null,
    revtype     tinyint,
    nome        varchar(60),
    primary key (id, revision_id),
    CONSTRAINT fk_revision_id_auditoria_produtor FOREIGN KEY (revision_id)
        REFERENCES auditoria.info_auditoria (id)
);

// INSERT's

-- SEGURANCA
MERGE INTO seguranca.usuario (USERNAME, SENHA) KEY (USERNAME)
    VALUES ('test1', '$2a$10$Xu9SeWMo8Ho.uCqII97GZObmWCnzVj.km/dS60hSBsAdLWYZ6T3iG'); // test1

MERGE INTO seguranca.usuario (USERNAME, SENHA) KEY (USERNAME)
    VALUES ('test2', '$2a$10$wO/HyhdWXntEpILnsojIa.w9ZLmfMC/Zlvsop1lCXc1vjeOCh2.pi');
// test2

-- DOMINIO
MERGE INTO DOMINIO.MUSICA (TITULO, LETRA) KEY (TITULO)
    VALUES ('People Get Ready',
            'People get ready Theres a train a-coming You dont need no baggage You just get on board All you need is faith To hear the diesels humming Dont need no ticket You just thank the Lord');

MERGE INTO DOMINIO.MUSICA (TITULO, LETRA) KEY (TITULO)
    VALUES ('Vem habitar',
            'Vem habitar Não queremos só uma visita Venha desfrutar Tu és adorado neste lugar E mais que tudo nós queremos Tua glória, tua glória.');

MERGE INTO DOMINIO.MUSICA (TITULO, LETRA) KEY (TITULO)
    VALUES ('Sinonimos',
            'Quanto o tempo o coração leva pra saber Que o sinônimo de amar é sofrer No aroma de amores pode haver espinhos É como ter mulheres e milhões e ser sozinho Na solidão de casa, descansar O sentido da vida, encontrar Ninguém pode dizer onde a felicidade está');

MERGE INTO DOMINIO.PRODUTOR (NOME) KEY (NOME)
    VALUES ('Flauzino JR');
